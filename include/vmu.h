#ifndef VMU_H
#define VMU_H

#include <dc/maple.h>
#include <dc/maple/vmu.h>
#include <stdint.h>

#define VMU_LCD_WIDTH 48
#define VMU_LCD_HEIGHT 32
#define VMU_LCD_BYTES ((VMU_LCD_WIDTH * VMU_LCD_HEIGHT) / 8)


static unsigned short vmu_icon_pal[] = {
0xF000, 0xF000, 0xF000, 0xF000, 0xF000, 0xF000, 0xF000, 0xF000, 0xF000, 0xF000, 0xF000, 0xF000, 0xF000, 0xF000, 0xF000, 0xF000, };

static unsigned char vmu_icon_img[] = {
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xF0,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xF0,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x0F,0xFF,0x00,0x0F,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0xFF,0xFF,0xFF,0xFF,0xF0,0x0F,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0xFF,0xFF,0xFF,0xFF,0xF0,0x0F,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0xF0,0x0F,0xFF,0x00,0xF0,0x0F,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xF0,0xFF,0xF0,0x0F,0xFF,0x00,0xFF,0xF0,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xF0,0xFF,0xF0,0x0F,0xFF,0x00,0xFF,0xF0,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xF0,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xF0,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0xFF,0xFF,0xFF,0xFF,0xF0,0x0F,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0xFF,0xFF,0xFF,0xFF,0xF0,0x0F,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0xF0,0x0F,0xFF,0x00,0xF0,0x0F,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x0B,0xB0,0x00,0xBB,0x0F,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x0B,0xB0,0x00,0xBB,0x0F,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xF0,0x00,0xFF,0x00,0x00,0x00,0x00,0x0F,0xF0,0x00,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xF0,0x00,0xFF,0x00,0x00,0x00,0x00,0x0F,0xF0,0x00,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0x0F,0xFF,0x00,0xAA,0xAA,0xAA,0xAA,0xA0,0x0F,0xFF,0x0F,0xFF,0xFF,
0xFF,0xFF,0xFF,0x0F,0xFF,0x00,0xAA,0xAA,0xAA,0xAA,0xA0,0x0F,0xFF,0x0F,0xFF,0xFF,
0xFF,0xFF,0xFF,0x0F,0xFF,0x00,0xAA,0xAA,0xAA,0xAA,0xA0,0x0F,0xFF,0x0F,0xFF,0xFF,
0xFF,0xFF,0xFF,0xF0,0x00,0x00,0xDA,0xAD,0xDD,0xAA,0xD0,0x00,0x00,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xF0,0xDD,0xDD,0xDD,0xDD,0xDD,0xDD,0xD0,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xF0,0xDD,0xDD,0xDD,0xDD,0xDD,0xDD,0xD0,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xF0,0xDD,0xDD,0xD0,0x00,0xDD,0xDD,0xD0,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x0F,0xFF,0x00,0x00,0x0F,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x0F,0xFF,0x00,0x00,0x0F,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
};

// Returns a pointer to the first VMU with an LCD, or NULL if not found
maple_device_t* vmu_find_lcd(void);

// Converts 4bpp grayscale image to 1bpp LCD format (input must be 48x32 @ 4bpp)
void vmu_convert_icon_to_lcd(const uint8_t *img_4bpp, uint8_t *out_lcd);

// Draws the image on the VMU's LCD
int vmu_draw_icon(maple_device_t *vmu, const uint8_t *img_4bpp);



#endif // VMU_H
